{
  "version": 3,
  "sources": ["../../url-params-parser/url_parser.js", "../../url-params-parser/index.js"],
  "sourcesContent": ["const UrlParser = (urlString, namedUrl = \"\") => {\n  const urlBase = new URL(urlString);\n\n  /**\n   * Wrapper for URL.hash\n   *\n   **/\n  function hash() {\n    return urlBase.hash;\n  }\n\n  /**\n   * Wrapper for URL.host\n   *\n   **/\n  function host() {\n    return urlBase.host;\n  }\n\n  /**\n   * Wrapper for URL.hostname\n   *\n   **/\n  function hostname() {\n    return urlBase.hostname;\n  }\n\n  /**\n   * Returns an object with all the named params and their values\n   *\n   **/\n  function namedParams() {\n    const allPathName = pathNames();\n    const allNamedParamsKeys = namedParamsWithIndex();\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values[paramKey.value] = allPathName[paramKey.index];\n      return values;\n    }, {});\n  }\n\n  /**\n   * Returns an array with all the named param keys\n   *\n   **/\n  function namedParamsKeys() {\n    const allNamedParamsKeys = namedParamsWithIndex(namedUrl);\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values.push(paramKey.value);\n      return values;\n    }, []);\n  }\n\n  /**\n   * Returns an array with all the named param values\n   *\n   **/\n  function namedParamsValues() {\n    const allPathName = pathNames();\n    const allNamedParamsKeys = namedParamsWithIndex();\n\n    return allNamedParamsKeys.reduce((values, paramKey) => {\n      values.push(allPathName[paramKey.index]);\n      return values;\n    }, []);\n  }\n\n  /**\n   * Returns an array with all named param ids and their position in the path\n   * Private\n   **/\n  function namedParamsWithIndex() {\n    const namedUrlParams = getPathNames(namedUrl);\n\n    return namedUrlParams.reduce((validParams, param, index) => {\n      if (param[0] === \":\") {\n        validParams.push({ value: param.slice(1), index });\n      }\n      return validParams;\n    }, []);\n  }\n\n  /**\n   * Wrapper for URL.port\n   *\n   **/\n  function port() {\n    return urlBase.port;\n  }\n\n  /**\n   * Wrapper for URL.pathname\n   *\n   **/\n  function pathname() {\n    return urlBase.pathname;\n  }\n\n  /**\n   * Wrapper for URL.protocol\n   *\n   **/\n  function protocol() {\n    return urlBase.protocol;\n  }\n\n  /**\n   * Wrapper for URL.search\n   *\n   **/\n  function search() {\n    return urlBase.search;\n  }\n\n  /**\n   * Returns an object with all query params and their values\n   *\n   **/\n  function queryParams() {\n    const params = {};\n    urlBase.searchParams.forEach((value, key) => {\n      params[key] = value;\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the query param keys\n   *\n   **/\n  function queryParamsKeys() {\n    const params = [];\n    urlBase.searchParams.forEach((_value, key) => {\n      params.push(key);\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the query param values\n   *\n   **/\n  function queryParamsValues() {\n    const params = [];\n    urlBase.searchParams.forEach((value) => {\n      params.push(value);\n    });\n\n    return params;\n  }\n\n  /**\n   * Returns an array with all the elements of a pathname\n   *\n   **/\n  function pathNames() {\n    return getPathNames(urlBase.pathname);\n  }\n\n  /**\n   * Returns an array with all the parts of a pathname\n   * Private method\n   **/\n  function getPathNames(pathName) {\n    if (pathName === \"/\" || pathName.trim().length === 0) return [pathName];\n    if (pathName.slice(-1) === \"/\") {\n      pathName = pathName.slice(0, -1);\n    }\n    if (pathName[0] === \"/\") {\n      pathName = pathName.slice(1);\n    }\n\n    return pathName.split(\"/\");\n  }\n\n  return Object.freeze({\n    hash: hash(),\n    host: host(),\n    hostname: hostname(),\n    namedParams: namedParams(),\n    namedParamsKeys: namedParamsKeys(),\n    namedParamsValues: namedParamsValues(),\n    pathNames: pathNames(),\n    port: port(),\n    pathname: pathname(),\n    protocol: protocol(),\n    search: search(),\n    queryParams: queryParams(),\n    queryParamsKeys: queryParamsKeys(),\n    queryParamsValues: queryParamsValues(),\n  });\n};\n\nmodule.exports = { UrlParser };\n", "const UrlParser = require(\"./url_parser\").UrlParser;\n\nmodule.exports = {\n  UrlParser\n};\n"],
  "mappings": "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",
  "names": []
}
