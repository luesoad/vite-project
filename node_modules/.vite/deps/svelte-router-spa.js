import {
  writable
} from "./chunk-MWXOVRMB.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  add_location,
  attr_dev,
  check_outros,
  component_subscribe,
  construct_svelte_component_dev,
  create_component,
  create_slot,
  destroy_component,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  get_all_dirty_from_scope,
  get_slot_changes,
  group_outros,
  init,
  insert_dev,
  listen_dev,
  mount_component,
  onMount,
  safe_not_equal,
  toggle_class,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots,
  validate_store
} from "./chunk-25MKFXGB.js";

// node_modules/svelte-router-spa/src/store.js
var { set, subscribe } = writable({});
var remove = () => {
  set({});
};
var activeRoute = {
  subscribe,
  set,
  remove
};

// node_modules/svelte-router-spa/src/router/url_parser.js
var UrlParser = (urlString, namedUrl = "") => {
  const urlBase = new URL(urlString);
  function hash() {
    return urlBase.hash;
  }
  function host() {
    return urlBase.host;
  }
  function hostname() {
    return urlBase.hostname;
  }
  function namedParams() {
    const allPathName = pathNames();
    const allNamedParamsKeys = namedParamsWithIndex();
    return allNamedParamsKeys.reduce((values, paramKey) => {
      values[paramKey.value] = allPathName[paramKey.index];
      return values;
    }, {});
  }
  function namedParamsKeys() {
    const allNamedParamsKeys = namedParamsWithIndex(namedUrl);
    return allNamedParamsKeys.reduce((values, paramKey) => {
      values.push(paramKey.value);
      return values;
    }, []);
  }
  function namedParamsValues() {
    const allPathName = pathNames();
    const allNamedParamsKeys = namedParamsWithIndex();
    return allNamedParamsKeys.reduce((values, paramKey) => {
      values.push(allPathName[paramKey.index]);
      return values;
    }, []);
  }
  function namedParamsWithIndex() {
    const namedUrlParams = getPathNames2(namedUrl);
    return namedUrlParams.reduce((validParams, param, index) => {
      if (param[0] === ":") {
        validParams.push({ value: param.slice(1), index });
      }
      return validParams;
    }, []);
  }
  function port() {
    return urlBase.port;
  }
  function pathname() {
    return urlBase.pathname;
  }
  function protocol() {
    return urlBase.protocol;
  }
  function search() {
    return urlBase.search;
  }
  function queryParams() {
    const params = {};
    urlBase.searchParams.forEach((value, key) => {
      params[key] = value;
    });
    return params;
  }
  function queryParamsKeys() {
    const params = [];
    urlBase.searchParams.forEach((_value, key) => {
      params.push(key);
    });
    return params;
  }
  function queryParamsValues() {
    const params = [];
    urlBase.searchParams.forEach((value) => {
      params.push(value);
    });
    return params;
  }
  function pathNames() {
    return getPathNames2(urlBase.pathname);
  }
  function getPathNames2(pathName) {
    if (pathName === "/" || pathName.trim().length === 0)
      return [pathName];
    if (pathName.slice(-1) === "/") {
      pathName = pathName.slice(0, -1);
    }
    if (pathName[0] === "/") {
      pathName = pathName.slice(1);
    }
    return pathName.split("/");
  }
  return Object.freeze({
    hash: hash(),
    host: host(),
    hostname: hostname(),
    namedParams: namedParams(),
    namedParamsKeys: namedParamsKeys(),
    namedParamsValues: namedParamsValues(),
    pathNames: pathNames(),
    port: port(),
    pathname: pathname(),
    protocol: protocol(),
    search: search(),
    queryParams: queryParams(),
    queryParamsKeys: queryParamsKeys(),
    queryParamsValues: queryParamsValues()
  });
};

// node_modules/svelte-router-spa/src/lib/utils.js
var anyEmptyNestedRoutes = (routeObject) => {
  let result = false;
  if (Object.keys(routeObject).length === 0) {
    return true;
  }
  if (routeObject.childRoute && Object.keys(routeObject.childRoute).length === 0) {
    result = true;
  } else if (routeObject.childRoute) {
    result = anyEmptyNestedRoutes(routeObject.childRoute);
  }
  return result;
};
var compareRoutes = (pathName, routeName) => {
  routeName = removeSlash(routeName);
  if (routeName.includes(":")) {
    return routeName.includes(pathName);
  } else {
    return routeName.startsWith(pathName);
  }
};
var findLocalisedRoute = (pathName, route, language) => {
  let exists = false;
  if (language) {
    return { exists: route.lang && route.lang[language] && route.lang[language].includes(pathName), language };
  }
  exists = compareRoutes(pathName, route.name);
  if (!exists && route.lang && typeof route.lang === "object") {
    for (const [key, value] of Object.entries(route.lang)) {
      if (compareRoutes(pathName, value)) {
        exists = true;
        language = key;
      }
    }
  }
  return { exists, language };
};
var getNamedParams = (pathName = "") => {
  if (pathName.trim().length === 0)
    return [];
  const namedUrlParams = getPathNames(pathName);
  return namedUrlParams.reduce((validParams, param) => {
    if (param[0] === ":") {
      validParams.push(param.slice(1));
    }
    return validParams;
  }, []);
};
var getPathNames = (pathName) => {
  if (pathName === "/" || pathName.trim().length === 0)
    return [pathName];
  pathName = removeSlash(pathName, "both");
  return pathName.split("/");
};
var nameToPath = (name = "") => {
  let routeName;
  if (name === "/" || name.trim().length === 0)
    return name;
  name = removeSlash(name, "lead");
  routeName = name.split(":")[0];
  routeName = removeSlash(routeName, "trail");
  return routeName.toLowerCase();
};
var pathWithoutQueryParams = (currentRoute) => {
  const path = currentRoute.path.split("?");
  return path[0];
};
var pathWithQueryParams = (currentRoute) => {
  let queryParams = [];
  if (currentRoute.queryParams) {
    for (let [key, value] of Object.entries(currentRoute.queryParams)) {
      queryParams.push(`${key}=${value}`);
    }
  }
  const hash = currentRoute.hash ? currentRoute.hash : "";
  if (queryParams.length > 0) {
    return `${currentRoute.path}?${queryParams.join("&")}${hash}`;
  } else {
    return currentRoute.path + hash;
  }
};
var removeExtraPaths = (pathNames, basePathNames) => {
  const names = basePathNames.split("/");
  if (names.length > 1) {
    names.forEach(function(name, index) {
      if (name.length > 0 && index > 0) {
        pathNames.shift();
      }
    });
  }
  return pathNames;
};
var removeSlash = (pathName, position = "lead") => {
  if (position === "trail" || position === "both") {
    pathName = pathName.replace(/\/$/, "");
  }
  if (position === "lead" || position === "both") {
    pathName = pathName.replace(/^\//, "");
  }
  return pathName;
};
var routeNameLocalised = (route, language = null) => {
  if (!language || !route.lang || !route.lang[language]) {
    return route.name;
  } else {
    return route.lang[language];
  }
};
var startsWithNamedParam = (currentRoute) => {
  const routeName = removeSlash(currentRoute);
  return routeName.startsWith(":");
};
var updateRoutePath = (basePath, pathNames, route, language, convert = false) => {
  if (basePath === "/" || basePath.trim().length === 0)
    return { result: basePath, language: null };
  let basePathResult = basePath;
  let routeName = route.name;
  let currentLanguage = language;
  if (convert) {
    currentLanguage = "";
  }
  routeName = removeSlash(routeName);
  basePathResult = removeSlash(basePathResult);
  if (!route.childRoute) {
    let localisedRoute2 = findLocalisedRoute(basePathResult, route, currentLanguage);
    if (localisedRoute2.exists && convert) {
      basePathResult = routeNameLocalised(route, language);
    }
    let routeNames = routeName.split(":")[0];
    routeNames = removeSlash(routeNames, "trail");
    routeNames = routeNames.split("/");
    routeNames.shift();
    routeNames.forEach(() => {
      const currentPathName = pathNames[0];
      localisedRoute2 = findLocalisedRoute(`${basePathResult}/${currentPathName}`, route, currentLanguage);
      if (currentPathName && localisedRoute2.exists) {
        if (convert) {
          basePathResult = routeNameLocalised(route, language);
        } else {
          basePathResult = `${basePathResult}/${currentPathName}`;
        }
        pathNames.shift();
      } else {
        return { result: basePathResult, language: localisedRoute2.language };
      }
    });
    return { result: basePathResult, language: localisedRoute2.language };
  } else {
    return { result: basePath, language: currentLanguage };
  }
};

// node_modules/svelte-router-spa/src/router/current.js
var RouterCurrent = (trackPage) => {
  const trackPageview = trackPage || false;
  let activeRoute2 = "";
  const setActive = (newRoute, updateBrowserHistory) => {
    activeRoute2 = newRoute.path;
    pushActiveRoute(newRoute, updateBrowserHistory);
  };
  const active = () => {
    return activeRoute2;
  };
  const isActive = (queryPath, includePath = false) => {
    if (queryPath[0] !== "/") {
      queryPath = "/" + queryPath;
    }
    let pathName = UrlParser(`http://fake.com${queryPath}`).pathname;
    let activeRoutePath = UrlParser(`http://fake.com${activeRoute2}`).pathname;
    pathName = removeSlash(pathName, "trail");
    activeRoutePath = removeSlash(activeRoutePath, "trail");
    if (includePath) {
      return activeRoutePath.includes(pathName);
    } else {
      return activeRoutePath === pathName;
    }
  };
  const pushActiveRoute = (newRoute, updateBrowserHistory) => {
    if (typeof window !== "undefined") {
      const pathAndSearch = pathWithQueryParams(newRoute);
      if (updateBrowserHistory) {
        window.history.pushState({ page: pathAndSearch }, "", pathAndSearch);
      }
      if (trackPageview) {
        gaTracking(pathAndSearch);
      }
    }
  };
  const gaTracking = (newPage) => {
    if (typeof ga !== "undefined") {
      ga("set", "page", newPage);
      ga("send", "pageview");
    }
  };
  return Object.freeze({ active, isActive, setActive });
};

// node_modules/svelte-router-spa/src/router/guard.js
var RouterGuard = (onlyIf) => {
  const guardInfo = onlyIf;
  const valid = () => {
    return guardInfo && guardInfo.guard && typeof guardInfo.guard === "function";
  };
  const redirect = () => {
    return !guardInfo.guard();
  };
  const redirectPath = () => {
    let destinationUrl = "/";
    if (guardInfo.redirect && guardInfo.redirect.length > 0) {
      destinationUrl = guardInfo.redirect;
    }
    return destinationUrl;
  };
  return Object.freeze({ valid, redirect, redirectPath });
};

// node_modules/svelte-router-spa/src/router/redirect.js
var RouterRedirect = (route, currentPath) => {
  const guard = RouterGuard(route.onlyIf);
  const path = () => {
    let redirectTo = currentPath;
    if (route.redirectTo && route.redirectTo.length > 0) {
      redirectTo = route.redirectTo;
    }
    if (guard.valid() && guard.redirect()) {
      redirectTo = guard.redirectPath();
    }
    return redirectTo;
  };
  return Object.freeze({ path });
};

// node_modules/svelte-router-spa/src/router/route.js
function RouterRoute({ routeInfo, path, routeNamedParams, urlParser, namedPath, language }) {
  const namedParams = () => {
    const parsedParams = UrlParser(`https://fake.com${urlParser.pathname}`, namedPath).namedParams;
    return { ...routeNamedParams, ...parsedParams };
  };
  const get = () => {
    return {
      name: path,
      component: routeInfo.component,
      hash: urlParser.hash,
      layout: routeInfo.layout,
      queryParams: urlParser.queryParams,
      namedParams: namedParams(),
      path,
      language
    };
  };
  return Object.freeze({ get, namedParams });
}

// node_modules/svelte-router-spa/src/router/path.js
function RouterPath({ basePath, basePathName, pathNames, convert, currentLanguage }) {
  let updatedPathRoute;
  let route;
  let routePathLanguage = currentLanguage;
  function updatedPath(currentRoute) {
    route = currentRoute;
    updatedPathRoute = updateRoutePath(basePathName, pathNames, route, routePathLanguage, convert);
    routePathLanguage = convert ? currentLanguage : updatedPathRoute.language;
    return updatedPathRoute;
  }
  function localisedPathName() {
    return routeNameLocalised(route, routePathLanguage);
  }
  function localisedRouteWithoutNamedParams() {
    return nameToPath(localisedPathName());
  }
  function basePathNameWithoutNamedParams() {
    return nameToPath(updatedPathRoute.result);
  }
  function namedPath() {
    let localisedPath = localisedPathName();
    if (localisedPath && !localisedPath.startsWith("/")) {
      localisedPath = "/" + localisedPath;
    }
    return basePath ? `${basePath}${localisedPath}` : localisedPath;
  }
  function routePath() {
    let routePathValue = `${basePath}/${basePathNameWithoutNamedParams()}`;
    if (routePathValue === "//") {
      routePathValue = "/";
    }
    if (routePathLanguage) {
      pathNames = removeExtraPaths(pathNames, localisedRouteWithoutNamedParams());
    }
    const namedParams = getNamedParams(localisedPathName());
    if (namedParams && namedParams.length > 0) {
      namedParams.forEach(function() {
        if (pathNames.length > 0) {
          routePathValue += `/${pathNames.shift()}`;
        }
      });
    }
    return routePathValue;
  }
  function routeLanguage() {
    return routePathLanguage;
  }
  function basePathSameAsLocalised() {
    return basePathNameWithoutNamedParams() === localisedRouteWithoutNamedParams();
  }
  return Object.freeze({
    basePathSameAsLocalised,
    updatedPath,
    basePathNameWithoutNamedParams,
    localisedPathName,
    localisedRouteWithoutNamedParams,
    namedPath,
    pathNames,
    routeLanguage,
    routePath
  });
}

// node_modules/svelte-router-spa/src/router/finder.js
var NotFoundPage = "/404.html";
function RouterFinder({ routes, currentUrl, routerOptions: routerOptions2, convert }) {
  const defaultLanguage = routerOptions2.defaultLanguage;
  const sitePrefix = routerOptions2.prefix ? routerOptions2.prefix.toLowerCase() : "";
  const urlParser = parseCurrentUrl(currentUrl, sitePrefix);
  let redirectTo = "";
  let routeNamedParams = {};
  let staticParamMatch = false;
  function findActiveRoute() {
    let searchActiveRoute = searchActiveRoutes(routes, "", urlParser.pathNames, routerOptions2.lang, convert);
    if (!searchActiveRoute || !Object.keys(searchActiveRoute).length || anyEmptyNestedRoutes(searchActiveRoute)) {
      if (typeof window !== "undefined") {
        searchActiveRoute = routeNotFound(routerOptions2.lang);
      }
    } else {
      searchActiveRoute.path = pathWithoutQueryParams(searchActiveRoute);
      if (sitePrefix) {
        searchActiveRoute.path = `/${sitePrefix}${searchActiveRoute.path}`;
      }
    }
    return searchActiveRoute;
  }
  function searchActiveRoutes(routes2, basePath, pathNames, currentLanguage, convert2) {
    let currentRoute = {};
    let basePathName = pathNames.shift().toLowerCase();
    const routerPath = RouterPath({ basePath, basePathName, pathNames, convert: convert2, currentLanguage });
    staticParamMatch = false;
    routes2.forEach(function(route) {
      routerPath.updatedPath(route);
      if (matchRoute(routerPath, route.name)) {
        let routePath = routerPath.routePath();
        redirectTo = RouterRedirect(route, redirectTo).path();
        if (currentRoute.name !== routePath) {
          currentRoute = setCurrentRoute({
            route,
            routePath,
            routeLanguage: routerPath.routeLanguage(),
            urlParser,
            namedPath: routerPath.namedPath()
          });
        }
        if (route.nestedRoutes && route.nestedRoutes.length > 0 && routerPath.pathNames.length > 0) {
          currentRoute.childRoute = searchActiveRoutes(
            route.nestedRoutes,
            routePath,
            routerPath.pathNames,
            routerPath.routeLanguage(),
            convert2
          );
          currentRoute.path = currentRoute.childRoute.path;
          currentRoute.language = currentRoute.childRoute.language;
        } else if (nestedRoutesAndNoPath(route, routerPath.pathNames)) {
          const indexRoute = searchActiveRoutes(
            route.nestedRoutes,
            routePath,
            ["index"],
            routerPath.routeLanguage(),
            convert2
          );
          if (indexRoute && Object.keys(indexRoute).length > 0) {
            currentRoute.childRoute = indexRoute;
            currentRoute.language = currentRoute.childRoute.language;
          }
        }
      }
    });
    if (redirectTo) {
      currentRoute.redirectTo = redirectTo;
    }
    return currentRoute;
  }
  function matchRoute(routerPath, routeName) {
    const basePathSameAsLocalised = routerPath.basePathSameAsLocalised();
    if (basePathSameAsLocalised) {
      staticParamMatch = true;
    }
    return basePathSameAsLocalised || !staticParamMatch && startsWithNamedParam(routeName);
  }
  function nestedRoutesAndNoPath(route, pathNames) {
    return route.nestedRoutes && route.nestedRoutes.length > 0 && pathNames.length === 0;
  }
  function parseCurrentUrl(currentUrl2, sitePrefix2) {
    if (sitePrefix2 && sitePrefix2.trim().length > 0) {
      const replacePattern = currentUrl2.endsWith(sitePrefix2) ? sitePrefix2 : sitePrefix2 + "/";
      const noPrefixUrl = currentUrl2.replace(replacePattern, "");
      return UrlParser(noPrefixUrl);
    } else {
      return UrlParser(currentUrl2);
    }
  }
  function setCurrentRoute({ route, routePath, routeLanguage, urlParser: urlParser2, namedPath }) {
    const routerRoute = RouterRoute({
      routeInfo: route,
      urlParser: urlParser2,
      path: routePath,
      routeNamedParams,
      namedPath,
      language: routeLanguage || defaultLanguage
    });
    routeNamedParams = routerRoute.namedParams();
    return routerRoute.get();
  }
  const routeNotFound = (customLanguage) => {
    const custom404Page = routes.find((route) => route.name == "404");
    const language = customLanguage || defaultLanguage || "";
    if (custom404Page) {
      return { ...custom404Page, language, path: "404" };
    } else {
      return { name: "404", component: "", path: "404", redirectTo: NotFoundPage };
    }
  };
  return Object.freeze({ findActiveRoute });
}

// node_modules/svelte-router-spa/src/spa_router.js
var NotFoundPage2 = "/404.html";
var userDefinedRoutes = [];
var routerOptions = {};
var routerCurrent;
var SpaRouter = (routes, currentUrl, options = {}) => {
  routerOptions = { ...options };
  if (typeof currentUrl === "undefined" || currentUrl === "") {
    currentUrl = document.location.href;
  }
  routerCurrent = RouterCurrent(routerOptions.gaPageviews);
  currentUrl = removeSlash(currentUrl, "trail");
  userDefinedRoutes = routes;
  const findActiveRoute = () => {
    let convert = false;
    if (routerOptions.langConvertTo) {
      routerOptions.lang = routerOptions.langConvertTo;
      convert = true;
    }
    return RouterFinder({ routes, currentUrl, routerOptions, convert }).findActiveRoute();
  };
  const navigateNow = (destinationUrl, updateBrowserHistory) => {
    if (typeof window !== "undefined") {
      if (destinationUrl === NotFoundPage2) {
        routerCurrent.setActive({ path: NotFoundPage2 }, updateBrowserHistory);
      } else {
        navigateTo(destinationUrl);
      }
    }
    return destinationUrl;
  };
  const setActiveRoute = (updateBrowserHistory = true) => {
    const currentRoute = findActiveRoute();
    if (currentRoute.redirectTo) {
      return navigateNow(currentRoute.redirectTo, updateBrowserHistory);
    }
    routerCurrent.setActive(currentRoute, updateBrowserHistory);
    activeRoute.set(currentRoute);
    return currentRoute;
  };
  return Object.freeze({
    setActiveRoute,
    findActiveRoute
  });
};
var localisedRoute = (pathName, language) => {
  pathName = removeSlash(pathName, "lead");
  routerOptions.langConvertTo = language;
  return SpaRouter(userDefinedRoutes, "http://fake.com/" + pathName, routerOptions).findActiveRoute();
};
var navigateTo = (pathName, language = null, updateBrowserHistory = true) => {
  pathName = removeSlash(pathName, "lead");
  if (language) {
    routerOptions.langConvertTo = language;
  }
  return SpaRouter(userDefinedRoutes, "http://fake.com/" + pathName, routerOptions).setActiveRoute(
    updateBrowserHistory
  );
};
var routeIsActive = (queryPath, includePath = false) => {
  return routerCurrent.isActive(queryPath, includePath);
};
if (typeof window !== "undefined") {
  window.addEventListener("click", (event) => {
    if (event.target.localName.toLowerCase() !== "a")
      return;
    if (event.metaKey || event.ctrlKey || event.shiftKey)
      return;
    const sitePrefix = routerOptions.prefix ? `/${routerOptions.prefix.toLowerCase()}` : "";
    const targetHostNameInternal = event.target.pathname && event.target.host === window.location.host;
    const prefixMatchPath = sitePrefix.length > 1 ? event.target.pathname.startsWith(sitePrefix) : true;
    if (targetHostNameInternal && prefixMatchPath) {
      event.preventDefault();
      let navigatePathname = event.target.pathname + event.target.search;
      const destinationUrl = navigatePathname + event.target.search + event.target.hash;
      if (event.target.target === "_blank") {
        window.open(destinationUrl, "newTab");
      } else {
        navigateTo(destinationUrl);
      }
    }
  });
  window.onpopstate = function(_event) {
    let navigatePathname = window.location.pathname + window.location.search + window.location.hash;
    navigateTo(navigatePathname, null, false);
  };
}

// node_modules/svelte-router-spa/src/components/route.svelte
function create_if_block_2(ctx) {
  let route;
  let current;
  route = new Route({
    props: {
      currentRoute: ctx[0].childRoute,
      params: ctx[1]
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(route.$$.fragment);
    },
    m: function mount(target, anchor) {
      mount_component(route, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const route_changes = {};
      if (dirty & 1)
        route_changes.currentRoute = ctx2[0].childRoute;
      if (dirty & 2)
        route_changes.params = ctx2[1];
      route.$set(route_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(route.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(route.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(route, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_2.name,
    type: "if",
    source: "(10:34) ",
    ctx
  });
  return block;
}
function create_if_block_1(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  var switch_value = ctx[0].component;
  function switch_props(ctx2) {
    return {
      props: {
        currentRoute: {
          ...ctx2[0],
          component: ""
        },
        params: ctx2[1]
      },
      $$inline: true
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
  }
  const block = {
    c: function create() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_dev(target, switch_instance_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const switch_instance_changes = {};
      if (dirty & 1)
        switch_instance_changes.currentRoute = {
          ...ctx2[0],
          component: ""
        };
      if (dirty & 2)
        switch_instance_changes.params = ctx2[1];
      if (switch_value !== (switch_value = ctx2[0].component)) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx2));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(switch_instance_anchor);
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(8:33) ",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  var switch_value = ctx[0].layout;
  function switch_props(ctx2) {
    return {
      props: {
        currentRoute: { ...ctx2[0], layout: "" },
        params: ctx2[1]
      },
      $$inline: true
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
  }
  const block = {
    c: function create() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_dev(target, switch_instance_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const switch_instance_changes = {};
      if (dirty & 1)
        switch_instance_changes.currentRoute = { ...ctx2[0], layout: "" };
      if (dirty & 2)
        switch_instance_changes.params = ctx2[1];
      if (switch_value !== (switch_value = ctx2[0].layout)) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx2));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(switch_instance_anchor);
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(6:0) {#if currentRoute.layout}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block, create_if_block_1, create_if_block_2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[0].layout)
      return 0;
    if (ctx2[0].component)
      return 1;
    if (ctx2[0].childRoute)
      return 2;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx, -1))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Route", slots, []);
  let { currentRoute = {} } = $$props;
  let { params = {} } = $$props;
  const writable_props = ["currentRoute", "params"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Route> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("currentRoute" in $$props2)
      $$invalidate(0, currentRoute = $$props2.currentRoute);
    if ("params" in $$props2)
      $$invalidate(1, params = $$props2.params);
  };
  $$self.$capture_state = () => ({ currentRoute, params });
  $$self.$inject_state = ($$props2) => {
    if ("currentRoute" in $$props2)
      $$invalidate(0, currentRoute = $$props2.currentRoute);
    if ("params" in $$props2)
      $$invalidate(1, params = $$props2.params);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [currentRoute, params];
}
var Route = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { currentRoute: 0, params: 1 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Route",
      options,
      id: create_fragment.name
    });
  }
  get currentRoute() {
    throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set currentRoute(value) {
    throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get params() {
    throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set params(value) {
    throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var route_default = Route;

// node_modules/svelte-router-spa/src/components/router.svelte
function create_fragment2(ctx) {
  let route;
  let current;
  route = new route_default({
    props: { currentRoute: ctx[0] },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(route.$$.fragment);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      mount_component(route, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const route_changes = {};
      if (dirty & 1)
        route_changes.currentRoute = ctx2[0];
      route.$set(route_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(route.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(route.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(route, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance2($$self, $$props, $$invalidate) {
  let $activeRoute;
  validate_store(activeRoute, "activeRoute");
  component_subscribe($$self, activeRoute, ($$value) => $$invalidate(0, $activeRoute = $$value));
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Router", slots, []);
  let { routes = [] } = $$props;
  let { options = {} } = $$props;
  onMount(() => {
    SpaRouter(routes, document.location.href, options).setActiveRoute();
  });
  const writable_props = ["routes", "options"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Router> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("routes" in $$props2)
      $$invalidate(1, routes = $$props2.routes);
    if ("options" in $$props2)
      $$invalidate(2, options = $$props2.options);
  };
  $$self.$capture_state = () => ({
    onMount,
    SpaRouter,
    Route: route_default,
    activeRoute,
    routes,
    options,
    $activeRoute
  });
  $$self.$inject_state = ($$props2) => {
    if ("routes" in $$props2)
      $$invalidate(1, routes = $$props2.routes);
    if ("options" in $$props2)
      $$invalidate(2, options = $$props2.options);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [$activeRoute, routes, options];
}
var Router = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance2, create_fragment2, safe_not_equal, { routes: 1, options: 2 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Router",
      options,
      id: create_fragment2.name
    });
  }
  get routes() {
    throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set routes(value) {
    throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get options() {
    throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set options(value) {
    throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var router_default = Router;

// node_modules/svelte-router-spa/src/components/navigate.svelte
var file = "node_modules/svelte-router-spa/src/components/navigate.svelte";
function create_fragment3(ctx) {
  let a;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = ctx[6].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[5], null);
  const block = {
    c: function create() {
      a = element("a");
      if (default_slot)
        default_slot.c();
      attr_dev(a, "href", ctx[0]);
      attr_dev(a, "title", ctx[1]);
      attr_dev(a, "class", ctx[2]);
      toggle_class(a, "active", routeIsActive(ctx[0]));
      add_location(a, file, 26, 0, 560);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, a, anchor);
      if (default_slot) {
        default_slot.m(a, null);
      }
      current = true;
      if (!mounted) {
        dispose = listen_dev(a, "click", ctx[3], false, false, false);
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 32)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            ctx2[5],
            !current ? get_all_dirty_from_scope(ctx2[5]) : get_slot_changes(default_slot_template, ctx2[5], dirty, null),
            null
          );
        }
      }
      if (!current || dirty & 1) {
        attr_dev(a, "href", ctx2[0]);
      }
      if (!current || dirty & 2) {
        attr_dev(a, "title", ctx2[1]);
      }
      if (!current || dirty & 4) {
        attr_dev(a, "class", ctx2[2]);
      }
      if (!current || dirty & 5) {
        toggle_class(a, "active", routeIsActive(ctx2[0]));
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(a);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance3($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Navigate", slots, ["default"]);
  let { to = "/" } = $$props;
  let { title = "" } = $$props;
  let { styles = "" } = $$props;
  let { lang = null } = $$props;
  onMount(() => {
    if (lang) {
      const route = localisedRoute(to, lang);
      if (route) {
        $$invalidate(0, to = route.path);
      }
    }
  });
  const navigate = (event) => {
    if (event.metaKey || event.ctrlKey || event.shiftKey)
      return;
    event.preventDefault();
    event.stopPropagation();
    navigateTo(to);
  };
  const writable_props = ["to", "title", "styles", "lang"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Navigate> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("to" in $$props2)
      $$invalidate(0, to = $$props2.to);
    if ("title" in $$props2)
      $$invalidate(1, title = $$props2.title);
    if ("styles" in $$props2)
      $$invalidate(2, styles = $$props2.styles);
    if ("lang" in $$props2)
      $$invalidate(4, lang = $$props2.lang);
    if ("$$scope" in $$props2)
      $$invalidate(5, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    onMount,
    localisedRoute,
    navigateTo,
    routeIsActive,
    to,
    title,
    styles,
    lang,
    navigate
  });
  $$self.$inject_state = ($$props2) => {
    if ("to" in $$props2)
      $$invalidate(0, to = $$props2.to);
    if ("title" in $$props2)
      $$invalidate(1, title = $$props2.title);
    if ("styles" in $$props2)
      $$invalidate(2, styles = $$props2.styles);
    if ("lang" in $$props2)
      $$invalidate(4, lang = $$props2.lang);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [to, title, styles, navigate, lang, $$scope, slots];
}
var Navigate = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance3, create_fragment3, safe_not_equal, { to: 0, title: 1, styles: 2, lang: 4 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Navigate",
      options,
      id: create_fragment3.name
    });
  }
  get to() {
    throw new Error("<Navigate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set to(value) {
    throw new Error("<Navigate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get title() {
    throw new Error("<Navigate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set title(value) {
    throw new Error("<Navigate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get styles() {
    throw new Error("<Navigate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set styles(value) {
    throw new Error("<Navigate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get lang() {
    throw new Error("<Navigate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set lang(value) {
    throw new Error("<Navigate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var navigate_default = Navigate;
export {
  navigate_default as Navigate,
  route_default as Route,
  router_default as Router,
  SpaRouter,
  localisedRoute,
  navigateTo,
  routeIsActive
};
//# sourceMappingURL=svelte-router-spa.js.map
