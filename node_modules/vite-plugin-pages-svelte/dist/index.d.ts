import { Plugin } from 'vite';

/**
 * Plugin options.
 */
interface Options {
    /**
     * Relative path to the directory to search for page components.
     * @default 'src/pages'
     */
    pagesDir: string;
    /**
     * Valid file extensions for page components.
     * @default ['svelte']
     */
    extensions: string[];
    /**
     * List of path globs to exclude when resolving pages.
     */
    exclude: string[];
    /**
     * Sync load top level index file
     * @default true
     */
    syncIndex: boolean;
}
declare type UserOptions = Partial<Options>;
interface ResolvedOptions extends Options {
    /**
     * Resolves to the `root` value from Vite config.
     * @default config.root
     */
    root: string;
    /**
     * RegExp to match extensions
     */
    extensionsRE: RegExp;
}
declare type ImportMode = 'sync' | 'async';
declare type ImportModeResolveFn = (filepath: string) => ImportMode;

interface PreRoute {
    name: string;
    path?: string;
    children?: PreRoute[];
}

interface FileOutput {
    path: string;
    children?: FileOutput[];
}

/**
 * Generate
 * @param pages
 * @returns
 */
declare function generateRoutes(pages: FileOutput[]): PreRoute[];

declare function pagesPlugin(userOptions?: UserOptions): Plugin;

export { ImportMode, ImportModeResolveFn, ResolvedOptions, UserOptions, pagesPlugin as default, generateRoutes };
